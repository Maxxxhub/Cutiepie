from typing import Optional

import EmikoRobot.modules.sql.rules_sql as sql
from EmikoRobot import dispatcher
from EmikoRobot.modules.helper_funcs.chat_status import user_admin
from EmikoRobot.modules.helper_funcs.string_handling import markdown_parser
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ParseMode,
    Update,
    User,
)
from telegram.error import BadRequest
from telegram.ext import CallbackContext, CommandHandler, Filters
from telegram.utils.helpers import escape_markdown


def get_rules(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    send_rules(update, chat_id)


# Do not async - not from a handler
def send_rules(update, chat_id, from_pm=False):
    bot = dispatcher.bot
    user = update.effective_user  # type: Optional[User]
    reply_msg = update.message.reply_to_message
    try:
        chat = bot.get_chat(chat_id)
    except BadRequest as excp:
        if excp.message == "Chat not found" and from_pm:
            bot.send_message(
                user.id,
                "T ú·¥á  Ä·¥ú ü·¥ás s ú·¥è Ä·¥õ·¥Ñ·¥ú·¥õ “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs…¥'·¥õ  ô·¥á·¥á…¥ s·¥á·¥õ ·¥ò Ä·¥è·¥ò·¥á Ä ü è! Ask admins to "
                "fix this.\nMaybe they forgot the hyphen in ID",
            )
            return
        raise

    rules = sql.get_rules(chat_id)
    text = f"üìë R·¥ú ü·¥ás “ì·¥è Ä *{escape_markdown(chat.title)}* are:\n\n{rules}"

    if from_pm and rules:
        bot.send_message(
            user.id,
            text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
        )
    elif from_pm:
        bot.send_message(
            user.id,
            "T ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥á·¥õ ·¥Ä…¥ è  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  è·¥á·¥õ ‚ùó "
            "T ú…™s ·¥ò Ä·¥è ô·¥Ä ô ü è ·¥Ö·¥è·¥ás…¥'·¥õ ·¥ç·¥á·¥Ä…¥ …™·¥õ's  ü·¥Ä·¥° ü·¥áss ·¥õ ú·¥è·¥ú…¢ ú...!",
        )
    elif rules and reply_msg:
        reply_msg.reply_text(
            "P ü·¥á·¥Äs·¥á ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è s·¥á·¥á ·¥õ ú·¥á  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä…¢ üìÑ",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üìë R·¥ú ü·¥ás",
                            url=f"t.me/{bot.username}?start={chat_id}",
                        ),
                    ],
                ],
            ),
        )
    elif rules:
        update.effective_message.reply_text(
            "P ü·¥á·¥Äs·¥á ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è s·¥á·¥á ·¥õ ú·¥á  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä…¢ üìÑ",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üìë R·¥ú ü·¥ás",
                            url=f"t.me/{bot.username}?start={chat_id}",
                        ),
                    ],
                ],
            ),
        )
    else:
        update.effective_message.reply_text(
            "T ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥á·¥õ ·¥Ä…¥ è  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ/…¢ Ä·¥è·¥ú·¥ò  è·¥á·¥õ ‚ùó "
            "T ú…™s ·¥ò Ä·¥è ô·¥Ä ô ü è ·¥Ö·¥è·¥ás…¥'·¥õ ·¥ç·¥á·¥Ä…¥ …™·¥õ'·¥¢  ü·¥Ä·¥° ü·¥áss ·¥õ ú·¥è·¥ú…¢ ú...!",
        )


@user_admin
def set_rules(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    msg = update.effective_message  # type: Optional[Message]
    raw_text = msg.text
    args = raw_text.split(None, 1)  # use python's maxsplit to separate cmd and args
    if len(args) == 2:
        txt = args[1]
        offset = len(txt) - len(raw_text)  # set correct offset relative to command
        markdown_rules = markdown_parser(
            txt,
            entities=msg.parse_entities(),
            offset=offset,
        )

        sql.set_rules(chat_id, markdown_rules)
        update.effective_message.reply_text("S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥ú ü·¥ás  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ s·¥á·¥õ “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ ‚úÖ")


@user_admin
def clear_rules(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    sql.set_rules(chat_id, "")
    update.effective_message.reply_text("S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ ‚úÖ!")


def __stats__():
    return f"√ó {sql.num_chats()} ·¥Ñ ú·¥Ä·¥õs  ú·¥Ä·¥†·¥á  Ä·¥ú ü·¥ás s·¥á·¥õ."


def __import_data__(chat_id, data):
    # set chat rules
    rules = data.get("info", {}).get("rules", "")
    sql.set_rules(chat_id, rules)


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    return f"T ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs  ô·¥Ä·¥Ö …™·¥õ's  Ä·¥ú ü·¥ás s·¥á·¥õ ·¥õ·¥è : `{bool(sql.get_rules(chat_id))}`"


__mod_name__ = "R·¥ú ü·¥ás"

__help__ = """
√ó  /rules: G·¥á·¥õ ·¥õ ú·¥á  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.
√ó  /rules here: I ·¥õ·¥è·¥è ·¥Ö·¥è…¥'·¥õ ·¥ã…¥·¥è·¥°...As·¥ã …™·¥õ …™…¥ @Teddysupport ‚ú®
A·¥Ö·¥ç…™…¥s /-:
√ó  /setrules <Y·¥è·¥ú Ä  Ä·¥ú ü·¥ás  ú·¥á Ä·¥á>: S·¥á·¥õ ·¥õ ú·¥á  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.
√ó  /clearrules: T·¥è ·¥Ñ ü·¥á·¥Ä Ä ·¥õ ú·¥á  Ä·¥ú ü·¥ás “ì·¥è Ä ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ. """

GET_RULES_HANDLER = CommandHandler(
    "rules", get_rules, filters=Filters.chat_type.groups, run_async=True
)
SET_RULES_HANDLER = CommandHandler(
    "setrules", set_rules, filters=Filters.chat_type.groups, run_async=True
)
RESET_RULES_HANDLER = CommandHandler(
    "clearrules", clear_rules, filters=Filters.chat_type.groups, run_async=True
)

dispatcher.add_handler(GET_RULES_HANDLER)
dispatcher.add_handler(SET_RULES_HANDLER)
dispatcher.add_handler(RESET_RULES_HANDLER)
