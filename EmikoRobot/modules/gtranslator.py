from gpytranslate import Translator
from telegram.ext import CommandHandler, CallbackContext
from telegram import (
    Message,
    Chat,
    User,
    ParseMode,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from EmikoRobot import dispatcher, pbot
from pyrogram import filters
from EmikoRobot.modules.disable import DisableAbleCommandHandler


__help__ = """ 
T ú…™s ·¥ç·¥è·¥Ö·¥ú ü·¥á ·¥°…™ ü ü  ú·¥á ü·¥ò. è·¥è·¥ú …™…¥ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ…™·¥è…¥!
*‚úò ùóñùóºùó∫ùó∫ùóÆùóªùó±ùòÄ ‚úò:*
‚ûª /tl (or /tr): As ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á, ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥ás …™·¥õ ·¥õ·¥è ·¥á…¥…¢ ü…™s ú.
‚ûª /tl <lang>: T Ä·¥Ä…¥s ü·¥Ä·¥õ·¥ás ·¥õ·¥è < ü·¥Ä…¥…¢ ·¥Ñ·¥è·¥Ö·¥á>
eg: /tl en: T Ä·¥Ä…¥s ü·¥Ä·¥õ·¥ás ·¥õ·¥è ·¥á…¥…¢ ü…™s ú.
‚ûª /tl <source>//<dest>: T Ä·¥Ä…¥s ü·¥Ä·¥õ·¥ás “ì Ä·¥è·¥ç <source> ·¥õ·¥è <lang>.
·¥á…¢:  /tl ja//en: T Ä·¥Ä…¥s ü·¥Ä·¥õ·¥ás “ì Ä·¥è·¥ç ·¥ä·¥Ä·¥ò·¥Ä…¥·¥ás·¥á ·¥õ·¥è ·¥á…¥…¢ ü…™s ú.
‚ûª /langs: G·¥á·¥õ ·¥Ä  ü…™s·¥õ ·¥è“ì s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥ás “ì·¥è Ä ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ…™·¥è…¥.
I ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ ·¥õ·¥è ·¥õ·¥áx·¥õ ·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ·¥Ä…¥·¥Ö ·¥†·¥è…™·¥Ñ·¥á ·¥õ·¥è ·¥õ·¥áx·¥õ.
‚ûª /tts <lang code>*:* R·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥çs…¢ ·¥õ·¥è …¢·¥á·¥õ ·¥õ·¥áx·¥õ ·¥õ·¥è s·¥ò·¥á·¥á·¥Ñ ú ·¥è·¥ú·¥õ·¥ò·¥ú·¥õ.
‚ûª /stt*:* T è·¥ò·¥á …™…¥  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥†·¥è…™·¥Ñ·¥á ·¥çs…¢ (s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥á…¥…¢ ·¥è…¥ ü è) ·¥õ·¥è ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ ·¥õ·¥áx·¥õ “ì Ä·¥è·¥ç …™·¥õ.
*‚úò [C ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á “ì·¥è Ä  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ·¥Ñ·¥è·¥Ö·¥ás](https://t.me/Teddy_bot_updates/73) ‚úò*
"""

__mod_name__ = "T Ä·¥Ä…¥Íú± ü·¥Ä·¥õ·¥è Ä"


trans = Translator()


@pbot.on_message(filters.command(["tl", "tr"]))
async def translate(_, message: Message) -> None:
    reply_msg = message.reply_to_message
    if not reply_msg:
        await message.reply_text("R·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥çs…¢ ·¥õ·¥è ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á …™·¥õ!")
        return
    if reply_msg.caption:
        to_translate = reply_msg.caption
    elif reply_msg.text:
        to_translate = reply_msg.text
    try:
        args = message.text.split()[1].lower()
        if "//" in args:
            source = args.split("//")[0]
            dest = args.split("//")[1]
        else:
            source = await trans.detect(to_translate)
            dest = args
    except IndexError:
        source = await trans.detect(to_translate)
        dest = "en"
    translation = await trans(to_translate, sourcelang=source, targetlang=dest)
    reply = (
        f"<b>T Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç {source} ·¥õ·¥è {dest}</b>:\n"
        f"<code>{translation.text}</code>"
    )

    await message.reply_text(reply, parse_mode="html")


def languages(update: Update, context: CallbackContext) -> None:
    update.effective_message.reply_text(
        "C ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è s·¥á·¥á ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ·¥Ñ·¥è·¥Ö·¥ás.",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text=" üóΩL·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ·¥Ñ·¥è·¥Ö·¥ás üóΩ",
                        url="https://t.me/Teddy_bot_updates/73",
                    ),
                ],
            ],
            disable_web_page_preview=True,
        ),
    )


LANG_HANDLER = DisableAbleCommandHandler("langs", languages, run_async=True)

dispatcher.add_handler(LANG_HANDLER)
