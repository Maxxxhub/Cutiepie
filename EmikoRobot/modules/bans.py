import html
import random

from time import sleep
from telegram import (
    ParseMode,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.error import BadRequest
from telegram.ext import CallbackContext, Filters, CommandHandler, run_async, CallbackQueryHandler
from telegram.utils.helpers import mention_html
from typing import Optional, List
from telegram import TelegramError

import EmikoRobot.modules.sql.users_sql as sql
from EmikoRobot.modules.disable import DisableAbleCommandHandler
from EmikoRobot.modules.helper_funcs.filters import CustomFilters
from EmikoRobot import (
    DEV_USERS,
    LOGGER,
    OWNER_ID,
    DRAGONS,
    DEMONS,
    TIGERS,
    WOLVES,
    dispatcher,
)
from EmikoRobot.modules.helper_funcs.chat_status import (
    user_admin_no_reply,
    bot_admin,
    can_restrict,
    connection_status,
    is_user_admin,
    is_user_ban_protected,
    is_user_in_chat,
    user_admin,
    user_can_ban,
    can_delete,
    dev_plus,
)
from EmikoRobot.modules.helper_funcs.extraction import extract_user_and_text
from EmikoRobot.modules.helper_funcs.string_handling import extract_time
from EmikoRobot.modules.log_channel import gloggable, loggable



@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def ban(update: Update, context: CallbackContext) -> str:
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    log_message = ""
    bot = context.bot
    args = context.args
    reason = ""
    if message.reply_to_message and message.reply_to_message.sender_chat:
        r = bot.ban_chat_sender_chat(chat_id=chat.id, sender_chat_id=message.reply_to_message.sender_chat.id)
        if r:
            message.reply_text("C ú·¥Ä…¥…¥·¥á ü {} ·¥°·¥Äs  ô·¥Ä…¥…¥·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è “ì Ä·¥è·¥ç {}".format(
                html.escape(message.reply_to_message.sender_chat.title),
                html.escape(chat.title)
            ),
                parse_mode="html"
            )
        else:
            message.reply_text("F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  ô·¥Ä…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
        return

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("‚ö†Ô∏è Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö.")
        return log_message
    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "User not found":
            raise
        message.reply_text("C·¥Ä…¥'·¥õ s·¥á·¥á·¥çs ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥.")
        return log_message
    if user_id == bot.id:
        message.reply_text("O ú  è·¥á·¥Ä ú,  ô·¥Ä…¥ ·¥ç ès·¥á ü“ì, …¥·¥è·¥è ô!")
        return log_message

    if is_user_ban_protected(chat, user_id, member) and user not in DEV_USERS:
        if user_id == OWNER_ID:
            message.reply_text("‚ù§Ô∏è·¥Ö·¥á,  ô·¥Ä·¥Ä·¥ò  ú·¥Ä…™…¥ ·¥°·¥è ú ·¥ç·¥á Ä·¥á, ·¥ú…¥·¥ã·¥è ·¥ã·¥Ä…™s·¥á  Ä…™s·¥ã ·¥ç·¥á…™…¥ ·¥Ö·¥Ä ü·¥ú  ô·¥Ä·¥õ·¥Ä?")
        elif user_id in DEV_USERS:
            message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ ·¥Ä…¢·¥Ä…™…¥s·¥õ ·¥è·¥ú Ä ·¥ò Ä…™…¥·¥Ñ·¥á.")
        elif user_id in DRAGONS:
            message.reply_text(
                "F…™…¢ ú·¥õ…™…¥…¢ ·¥õ ú…™s ·¥á·¥ç·¥ò·¥á Ä·¥è Ä  ú·¥á Ä·¥á ·¥°…™ ü ü ·¥ò·¥ú·¥õ ·¥ús·¥á Ä  ü…™·¥†·¥ás ·¥Ä·¥õ  Ä…™s·¥ã."
            )
        elif user_id in DEMONS:
            message.reply_text(
                "B Ä…™…¥…¢ ·¥Ä…¥ ·¥è Ä·¥Ö·¥á Ä “ì Ä·¥è·¥ç ·¥Ñ·¥Ä·¥ò·¥õ·¥Ä…™…¥ ·¥õ·¥è “ì…™…¢ ú·¥õ ·¥Ä ·¥Äss…™s·¥Ä…¥ s·¥á Ä·¥†·¥Ä…¥·¥õ."
            )
        elif user_id in TIGERS:
            message.reply_text(
                "B Ä…™…¥…¢ ·¥Ä…¥ ·¥è Ä·¥Ö·¥á Ä “ì Ä·¥è·¥ç s·¥è ü·¥Ö…™·¥á Ä ·¥õ·¥è “ì…™…¢ ú·¥õ ·¥Ä  ü·¥Ä…¥·¥Ñ·¥á Ä s·¥á Ä·¥†·¥Ä…¥·¥õ."
            )
        elif user_id in WOLVES:
            message.reply_text("T Ä·¥Ä·¥Ö·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥ç·¥Ä·¥ã·¥á ·¥õ ú·¥á·¥ç  ô·¥Ä…¥ …™·¥ç·¥ç·¥ú…¥·¥á!")
        else:
            message.reply_text("‚ö†Ô∏è C·¥Ä…¥…¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥.")
        return log_message
    if message.text.startswith("/s"):
        silent = True
        if not can_delete(chat, context.bot.id):
            return ""
    else:
        silent = False
    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#{'S' if silent else ''}BANNED\n"
        f"<b>A·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
        f"<b>Us·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
    )
    if reason:
        log += "<b>R·¥á·¥Äs·¥è…¥:</b> {}".format(reason)

    try:
        chat.ban_member(user_id)

        if silent:
            if message.reply_to_message:
                message.reply_to_message.delete()
            message.delete()
            return log

        # bot.send_sticker(chat.id, BAN_STICKER)  # banhammer marie sticker
        reply = (
            f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>] B·¥Ä…¥…¥·¥á·¥Ö."
        )
        if reason:
            reply += f"\nR·¥á·¥Äs·¥è…¥: {html.escape(reason)}"

        bot.sendMessage(
            chat.id,
            reply,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üîÑ  U…¥ ô·¥Ä…¥", callback_data=f"unbanb_unban={user_id}"
                        ),
                        InlineKeyboardButton(text="üóëÔ∏è  D·¥á ü·¥á·¥õ·¥á", callback_data="unbanb_del"),
                    ]
                ]
            ),
            parse_mode=ParseMode.HTML,
        )
        return log

    except BadRequest as excp:
        if excp.message == "Reply message not found":
            # Do not reply
            if silent:
                return log
            message.reply_text("B·¥Ä…¥…¥·¥á·¥Ö!", quote=False)
            return log
        else:
            LOGGER.warning(update)
            LOGGER.exception(
                "ERROR  ô·¥Ä…¥…¥…™…¥…¢ ·¥ús·¥á Ä %s …™…¥ %s (%s) ·¥Ö·¥ú·¥á ·¥õ·¥è %s",
                user_id,
                chat.title,
                chat.id,
                excp.message,
            )
            message.reply_text("U ú·¥ç...·¥õ ú·¥Ä·¥õ ·¥Ö…™·¥Ö…¥'·¥õ ·¥°·¥è Ä·¥ã...")

    return log_message


@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def temp_ban(update: Update, context: CallbackContext) -> str:
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    log_message = ""
    bot, args = context.bot, context.args
    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("‚ö†Ô∏è Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö.")
        return log_message

    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "User not found":
            raise
        message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥á·¥çs ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä.")
        return log_message
    if user_id == bot.id:
        message.reply_text("I'·¥ç …¥·¥è·¥õ …¢·¥è…¥…¥·¥Ä BAN ·¥ç ès·¥á ü“ì, ·¥° ú·¥Ä·¥õ ·¥õ ú·¥á “ì*·¥Ñ·¥ã  ô Ä·¥è?")
        return log_message

    if is_user_ban_protected(chat, user_id, member):
        message.reply_text("I ·¥Ö·¥è…¥'·¥õ “ì·¥á·¥á ü  ü…™·¥ã·¥á …™·¥õ.")
        return log_message

    if not reason:
        message.reply_text("Y·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥Ä ·¥õ…™·¥ç·¥á ·¥õ·¥è  ô·¥Ä…¥ ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä “ì·¥è Ä!")
        return log_message

    split_reason = reason.split(None, 1)

    time_val = split_reason[0].lower()
    reason = split_reason[1] if len(split_reason) > 1 else ""
    bantime = extract_time(message, time_val)

    if not bantime:
        return log_message

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        "#TEMP BANNED\n"
        f"<b>A·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
        f"<b>Us·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}\n"
        f"<b>T…™·¥ç·¥á:</b> {time_val}"
    )
    if reason:
        log += "\nR·¥á·¥Äs·¥è…¥: {}".format(reason)

    try:
        chat.ban_member(user_id, until_date=bantime)
        # bot.send_sticker(chat.id, BAN_STICKER)  # banhammer marie sticker

        reply_msg = (
            f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>] T·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä è  ô·¥Ä…¥…¥·¥á·¥Ö"
            f" “ì·¥è Ä (`{time_val}`)."
        )

        if reason:
            reply_msg += f"\nR·¥á·¥Äs·¥è…¥: `{html.escape(reason)}`"

        bot.sendMessage(
            chat.id,
            reply_msg,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üîÑ  U…¥ ô·¥Ä…¥", callback_data=f"unbanb_unban={user_id}"
                        ),
                        InlineKeyboardButton(text="üóëÔ∏è  D·¥á ü·¥á·¥õ·¥á", callback_data="unbanb_del"),
                    ]
                ]
            ),
            parse_mode=ParseMode.HTML,
        )
        return log

    except BadRequest as excp:
        if excp.message == "Reply message not found":
            # Do not reply
            message.reply_text(
                f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>]  ô·¥Ä…¥…¥·¥á·¥Ö “ì·¥è Ä {time_val}.", quote=False
            )
            return log
        else:
            LOGGER.warning(update)
            LOGGER.exception(
                "ERROR  ô·¥Ä…¥…¥…™…¥…¢ ·¥ús·¥á Ä %s …™…¥ %s (%s) ·¥Ö·¥ú·¥á ·¥õ·¥è %s",
                user_id,
                chat.title,
                chat.id,
                excp.message,
            )
            message.reply_text("W·¥á ü ü ·¥Ö·¥Ä·¥ç…¥, …™ ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")

    return log_message


@connection_status
@bot_admin
@can_restrict
@user_admin_no_reply
@user_can_ban
@loggable
def unbanb_btn(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    query = update.callback_query
    chat = update.effective_chat
    user = update.effective_user
    if query.data != "unbanb_del":
        splitter = query.data.split("=")
        query_match = splitter[0]
        if query_match == "unbanb_unban":
            user_id = splitter[1]
            if not is_user_admin(chat, int(user.id)):
                bot.answer_callback_query(
                    query.id,
                    text="‚ö†Ô∏è Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥ò·¥á·¥è·¥ò ü·¥á",
                    show_alert=True,
                )
                return ""
            log_message = ""
            try:
                member = chat.get_member(user_id)
            except BadRequest:
                pass
            chat.unban_member(user_id)
            query.message.edit_text(
                f"{member.user.first_name} [{member.user.id}] U…¥ ô·¥Ä…¥…¥·¥á·¥Ö."
            )
            bot.answer_callback_query(query.id, text="Unbanned!")
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#UNBANNED\n"
                f"<b>A·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f"<b>Us·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
            )

    else:
        if not is_user_admin(chat, int(user.id)):
            bot.answer_callback_query(
                query.id,
                text="‚ö†Ô∏è Y·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú…™s ·¥çs…¢.",
                show_alert=True,
            )
            return ""
        query.message.delete()
        bot.answer_callback_query(query.id, text="Deleted!")
        return ""

    
@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def punch(update: Update, context: CallbackContext) -> str:
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    log_message = ""
    bot, args = context.bot, context.args
    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("‚ö†Ô∏è Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö")
        return log_message

    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "User not found":
            raise

        message.reply_text("‚ö†Ô∏è I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥á·¥çs ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä.")
        return log_message
    if user_id == bot.id:
        message.reply_text("Y·¥á·¥Ä ú ú ú. …™'·¥ç …¥·¥è·¥õ …¢·¥è…™…¥…¢ ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ")
        return log_message

    if is_user_ban_protected(chat, user_id):
        message.reply_text("I  Ä·¥á·¥Ä ü ü è ·¥°…™s ú …™ ·¥Ñ·¥è·¥ú ü·¥Ö ·¥ò·¥ú…¥·¥Ñ ú ·¥õ ú…™s ·¥ús·¥á Ä....")
        return log_message

    res = chat.unban_member(user_id)  # unban on current user = kick
    if res:
        # bot.send_sticker(chat.id, BAN_STICKER)  # banhammer marie sticker
        bot.sendMessage(
            chat.id,
            f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>] K…™·¥Ñ·¥ã·¥á·¥Ö.",
            parse_mode=ParseMode.HTML
        )
        log = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#KICKED\n"
            f"<b>A·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
            f"<b>Us·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
        )
        if reason:
            log += f"\n<b>R·¥á·¥Äs·¥è…¥:</b> {reason}"

        return log

    else:
        message.reply_text("‚ö†Ô∏è W·¥á ü ü ·¥Ö·¥Ä·¥ç…¥, …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ò·¥ú…¥·¥Ñ ú ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")

    return log_message



@bot_admin
@can_restrict
def punchme(update: Update, context: CallbackContext):
    user_id = update.effective_message.from_user.id
    if is_user_admin(update.effective_chat, user_id):
        update.effective_message.reply_text("·¥Ä·¥Ö·¥ç…™…¥  ú·¥è·¥ã Ä …¥·¥Ä·¥õ·¥Ä·¥ã ·¥ç·¥õ ·¥ã Ä ·¥†·¥Ä·¥Ä…™.")
        return

    res = update.effective_chat.unban_member(user_id)  # unban on current user = kick
    if res:
        update.effective_message.reply_text(
            "…¥…™·¥ã·¥Ä ü  ô·¥á·¥õ·¥á  è ú·¥Ä s·¥á...!!",
        )
    else:
        update.effective_message.reply_text("H·¥ú ú? …™ ·¥Ñ·¥Ä…¥'·¥õ :/")


@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def unban(update: Update, context: CallbackContext) -> Optional[str]:
    message = update.effective_message
    user = update.effective_user
    chat = update.effective_chat
    log_message = ""
    bot, args = context.bot, context.args
    if message.reply_to_message and message.reply_to_message.sender_chat:
        r = bot.unban_chat_sender_chat(chat_id=chat.id, sender_chat_id=message.reply_to_message.sender_chat.id)
        if r:
            message.reply_text("C ú·¥Ä…¥…¥·¥á ü {} ·¥°·¥Äs  ô·¥Ä…¥…¥·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è “ì Ä·¥è·¥ç {}".format(
                html.escape(message.reply_to_message.sender_chat.title),
                html.escape(chat.title)
            ),
                parse_mode="html"
            )
        else:
            message.reply_text("F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
        return

    user_id, reason = extract_user_and_text(message, args)
    if not user_id:
        message.reply_text("‚ö†Ô∏è Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö.")
        return log_message

    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "User not found":
            raise
        message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥á·¥çs ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä.")
        return log_message
    if user_id == bot.id:
        message.reply_text("H·¥è·¥° ·¥°·¥è·¥ú ü·¥Ö …™ ·¥ú…¥ ô·¥Ä…¥ ·¥ç ès·¥á ü“ì …™“ì …™ ·¥°·¥Äs…¥'·¥õ ·¥õ ú·¥á Ä·¥á...?")
        return log_message

    if is_user_in_chat(chat, user_id):
        message.reply_text(f"‚ö†Ô∏è Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö.")
        return log_message

    chat.unban_member(user_id)
    message.reply_text(
        f"{member.user.first_name} [{member.user.id}] U…¥ ô·¥Ä…¥…¥·¥á·¥Ö."
    )

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#UNBANNED\n"
        f"<b>A·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
        f"<b>Us·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
    )
    if reason:
        log += f"\n<b>R·¥á·¥Äs·¥è…¥:</b> {reason}"

    return log


@connection_status
@bot_admin
@can_restrict
@gloggable
def selfunban(update: Update, context: CallbackContext) -> str:
    message = update.effective_message
    user = update.effective_user
    bot, args = context.bot, context.args
    if user.id not in DRAGONS or user.id not in TIGERS:
        return

    try:
        chat_id = int(args[0])
    except:
        message.reply_text("G…™·¥ç·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ ID.")
        return

    chat = bot.getChat(chat_id)

    try:
        member = chat.get_member(user.id)
    except BadRequest as excp:
        if excp.message == "User not found":
            message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥á·¥çs ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä.")
            return
        else:
            raise

    if is_user_in_chat(chat, user.id):
        message.reply_text("A Ä·¥á…¥'·¥õ  è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ??")
        return

    chat.unban_member(user.id)
    message.reply_text(f"Y·¥á·¥ò, …™  ú·¥Ä·¥†·¥á ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥õ ú·¥á ·¥ús·¥á Ä.")

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#UNBANNED\n"
        f"<b>Us·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
    )

    return log


@bot_admin
@can_restrict
@loggable
def banme(update: Update, context: CallbackContext):
    user_id = update.effective_message.from_user.id
    chat = update.effective_chat
    user = update.effective_user
    if is_user_admin(update.effective_chat, user_id):
        update.effective_message.reply_text("‚ö†Ô∏è I ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥.")
        return

    res = update.effective_chat.ban_member(user_id)
    if res:
        update.effective_message.reply_text("Y·¥ás,  è·¥ò·¥ú' Ä·¥á  Ä…™…¢ ú·¥õ! GTFO..")
        return (
            "<b>{}:</b>"
            "\n#BANME"
            "\n<b>Us·¥á Ä:</b> {}"
            "\n<b>ID:</b> <code>{}</code>".format(
                html.escape(chat.title),
                mention_html(user.id, user.first_name),
                user_id,
            )
        )

    else:
        update.effective_message.reply_text("H·¥ú ú? …™ ·¥Ñ·¥Ä…¥'·¥õ' :/")


@dev_plus
def snipe(update: Update, context: CallbackContext):
    args = context.args
    bot = context.bot
    try:
        chat_id = str(args[0])
        del args[0]
    except TypeError:
        update.effective_message.reply_text("P ü·¥á·¥Äs·¥á …¢…™·¥ç·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ ·¥õ·¥è ·¥á·¥Ñ ú·¥è ·¥õ·¥è!")
    to_send = " ".join(args)
    if len(to_send) >= 2:
        try:
            bot.sendMessage(int(chat_id), str(to_send))
        except TelegramError:
            LOGGER.warning("C·¥è·¥ú ü·¥Ö…¥'·¥õ s·¥á…¥·¥Ö ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò %s", str(chat_id))
            update.effective_message.reply_text(
                "C·¥è·¥ú ü·¥Ö…¥'·¥õ s·¥á·¥ç·¥Ö ·¥õ ú·¥á ·¥çs…¢. P·¥á Ä ú·¥Ä·¥òs …™'·¥ç …¥·¥è·¥õ ·¥è·¥Ä Ä·¥õ ·¥è“ì ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò?"
            )


__help__ = """
*·ëå’è·ó¥·ñá ·ëïO·ó∞·ó∞·ó©·ëé·ó™’è:*
‚ûª /kickme*:* K…™·¥Ñ·¥ãs ·¥õ ú·¥á ·¥ús·¥á Ä ·¥° ú·¥è ·¥úss·¥ú·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.
*·ó©·ó™·ó∞I·ëé’è O·ëé·í™Y:*
‚ûª /ban <userhandle>*:* B·¥Ä…¥s ·¥Ä ·¥ús·¥á Ä.
‚ûª /sban <userhandle>*:* S…™ ü·¥á…¥·¥õ ü è  ô·¥Ä…¥s ·¥Ä ·¥ús·¥á Ä.
‚ûª /tban <userhandle> X(m/h/d)*:* B·¥Ä…¥s ·¥Ä ·¥ús·¥á Ä “ì·¥è·¥õ X ·¥õ…™·¥ç·¥á. m = minutes, h = hours, d = days.
‚ûª /unban <userhandle>*:* U…¥ ô·¥Ä…¥s ·¥Ä ·¥ús·¥á Ä.
‚ûª /kick <userhandle>*:* K…™·¥Ñ·¥ãs ·¥Ä ·¥ús·¥á Ä ·¥è·¥ú·¥õ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.
‚ûª /mute <userhandle>*:* S…™ ü·¥á…¥·¥Ñ·¥ás ·¥Ä ·¥ús·¥á Ä.
‚ûª /tmute <userhandle> X(m/h/d)*:* M·¥ú·¥õ·¥ás ·¥Ä ·¥ús·¥á Ä “ì·¥è Ä X ·¥õ…™·¥ç·¥á. m = minutes, h = hours, d = days.
‚ûª /unmute <userhandle>*:* U…¥·¥ç·¥ú·¥õ·¥ás ·¥Ä ·¥ús·¥á Ä.
‚ûª /zombies*:* S·¥á·¥Ä Ä·¥Ñ ú·¥ás ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs.
‚ûª /zombies clean*:* R·¥á·¥ç·¥è·¥†·¥ás ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ·¥Ä “ì Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü.
‚ûª /snipe <chatid> <string>*:* M·¥Ä·¥ã·¥á ·¥ç s·¥á…¥·¥Ö ·¥Ä ·¥çs…¢ ·¥õ·¥è ·¥Ä s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ ·¥Ñ ú·¥Ä·¥õ.
"""


__mod_name__ = "B·¥Ä…¥Íú±/M·¥ú·¥õ·¥á"

BAN_HANDLER = CommandHandler(["ban", "sban"], ban, run_async=True)
TEMPBAN_HANDLER = CommandHandler(["tban"], temp_ban, run_async=True)
KICK_HANDLER = CommandHandler(["kick", "punch"], punch, run_async=True)
UNBAN_HANDLER = CommandHandler("unban", unban, run_async=True)
ROAR_HANDLER = CommandHandler("roar", selfunban, run_async=True)
UNBAN_BUTTON_HANDLER = CallbackQueryHandler(unbanb_btn, pattern=r"unbanb_")
KICKME_HANDLER = DisableAbleCommandHandler(["kickme", "punchme"], punchme, filters=Filters.chat_type.groups, run_async=True)
SNIPE_HANDLER = CommandHandler("snipe", snipe, pass_args=True, filters=CustomFilters.sudo_filter, run_async=True)
BANME_HANDLER = CommandHandler("banme", banme, run_async=True)

dispatcher.add_handler(BAN_HANDLER)
dispatcher.add_handler(TEMPBAN_HANDLER)
dispatcher.add_handler(KICK_HANDLER)
dispatcher.add_handler(UNBAN_HANDLER)
dispatcher.add_handler(ROAR_HANDLER)
dispatcher.add_handler(KICKME_HANDLER)
dispatcher.add_handler(UNBAN_BUTTON_HANDLER)
dispatcher.add_handler(SNIPE_HANDLER)
dispatcher.add_handler(BANME_HANDLER)

__handlers__ = [
    BAN_HANDLER,
    TEMPBAN_HANDLER,
    KICK_HANDLER,
    UNBAN_HANDLER,
    ROAR_HANDLER,
    KICKME_HANDLER,
    UNBAN_BUTTON_HANDLER,
    SNIPE_HANDLER,
    BANME_HANDLER,
]
