import time
import re

from telegram import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, Update, Bot
from telegram.error import BadRequest, Unauthorized
from telegram.ext import CommandHandler, CallbackQueryHandler

import EmikoRobot.modules.sql.connection_sql as sql
from EmikoRobot import dispatcher, DRAGONS, DEV_USERS
from EmikoRobot.modules.helper_funcs import chat_status
from EmikoRobot.modules.helper_funcs.alternate import send_message, typing_action

user_admin = chat_status.user_admin


@user_admin
@typing_action
def allow_connections(update, context) -> str:

    chat = update.effective_chat
    args = context.args

    if chat.type != chat.PRIVATE:
        if len(args) >= 1:
            var = args[0]
            if var == "no":
                sql.set_allow_connect_to_chat(chat.id, False)
                send_message(
                    update.effective_message,
                    "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ",
                )
            elif var == "yes":
                sql.set_allow_connect_to_chat(chat.id, True)
                send_message(
                    update.effective_message,
                    "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ",
                )
            else:
                send_message(
                    update.effective_message,
                    "P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä `yes` ·¥è Ä `no`!",
                    parse_mode=ParseMode.MARKDOWN,
                )
        else:
            get_settings = sql.allow_connect_to_chat(chat.id)
            if get_settings:
                send_message(
                    update.effective_message,
                    "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á *Allowed* “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs!",
                    parse_mode=ParseMode.MARKDOWN,
                )
            else:
                send_message(
                    update.effective_message,
                    "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á *Not Allowed* “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs!",
                    parse_mode=ParseMode.MARKDOWN,
                )
    else:
        send_message(
            update.effective_message,
            "T ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è. …¥·¥è·¥õ …™…¥ PM!",
        )


@typing_action
def connection_chat(update, context):

    chat = update.effective_chat
    user = update.effective_user

    conn = connected(context.bot, update, chat, user.id, need_admin=True)

    if conn:
        chat = dispatcher.bot.getChat(conn)
        chat_name = dispatcher.bot.getChat(conn).title
    else:
        if update.effective_message.chat.type != "private":
            return
        chat = update.effective_chat
        chat_name = update.effective_message.chat.title

    if conn:
        message = "Y·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è {}.\n".format(chat_name)
    else:
        message = "Y·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …™…¥ ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò.\n"
    send_message(update.effective_message, message, parse_mode="markdown")


@typing_action
def connect_chat(update, context):

    chat = update.effective_chat
    user = update.effective_user
    args = context.args

    if update.effective_chat.type == "private":
        if args and len(args) >= 1:
            try:
                connect_chat = int(args[0])
                getstatusadmin = context.bot.get_chat_member(
                    connect_chat,
                    update.effective_message.from_user.id,
                )
            except ValueError:
                try:
                    connect_chat = str(args[0])
                    get_chat = context.bot.getChat(connect_chat)
                    connect_chat = get_chat.id
                    getstatusadmin = context.bot.get_chat_member(
                        connect_chat,
                        update.effective_message.from_user.id,
                    )
                except BadRequest:
                    send_message(update.effective_message, "I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä ú ID!")
                    return
            except BadRequest:
                send_message(update.effective_message, "I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ ID!")
                return

            isadmin = getstatusadmin.status in ("administrator", "creator")
            ismember = getstatusadmin.status in ("member")
            isallow = sql.allow_connect_to_chat(connect_chat)

            if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
                connection_status = sql.connect(
                    update.effective_message.from_user.id,
                    connect_chat,
                )
                if connection_status:
                    conn_chat = dispatcher.bot.getChat(
                        connected(context.bot, update, chat, user.id, need_admin=False),
                    )
                    chat_name = conn_chat.title
                    send_message(
                        update.effective_message,
                        "S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*. \nUs·¥á /helpconnect ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.".format(
                            chat_name,
                        ),
                        parse_mode=ParseMode.MARKDOWN,
                    )
                    sql.add_history_conn(user.id, str(conn_chat.id), chat_name)
                else:
                    send_message(update.effective_message, "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö!")
            else:
                send_message(
                    update.effective_message,
                    "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
                )
        else:
            gethistory = sql.get_history_conn(user.id)
            if gethistory:
                buttons = [
                    InlineKeyboardButton(
                        text="‚ùé C ü·¥ès·¥á  ô·¥ú·¥õ·¥õ·¥è…¥",
                        callback_data="connect_close",
                    ),
                    InlineKeyboardButton(
                        text="üßπ C ü·¥á·¥Ä Ä  ú…™s·¥õ·¥è Ä è",
                        callback_data="connect_clear",
                    ),
                ]
            else:
                buttons = []
            conn = connected(context.bot, update, chat, user.id, need_admin=False)
            if conn:
                connectedchat = dispatcher.bot.getChat(conn)
                text = "Y·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}* (`{}`)".format(
                    connectedchat.title,
                    conn,
                )
                buttons.append(
                    InlineKeyboardButton(
                        text="üîå D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ",
                        callback_data="connect_disconnect",
                    ),
                )
            else:
                text = "W Ä…™·¥õ·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ID ·¥è Ä ·¥õ·¥Ä…¢ ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ!"
            if gethistory:
                text += "\n\n*C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú…™s·¥õ·¥è Ä è:*\n"
                text += "‚ïí‚ïê‚ïê‚ïê„Äå *I…¥“ì·¥è* „Äç\n"
                text += "‚îÇ  Sorted: `Newest`\n"
                text += "‚îÇ\n"
                buttons = [buttons]
                for x in sorted(gethistory.keys(), reverse=True):
                    htime = time.strftime("%d/%m/%Y", time.localtime(x))
                    text += "‚ïû‚ïê„Äå *{}* „Äç\n‚îÇ   `{}`\n‚îÇ   `{}`\n".format(
                        gethistory[x]["chat_name"],
                        gethistory[x]["chat_id"],
                        htime,
                    )
                    text += "‚îÇ\n"
                    buttons.append(
                        [
                            InlineKeyboardButton(
                                text=gethistory[x]["chat_name"],
                                callback_data="connect({})".format(
                                    gethistory[x]["chat_id"],
                                ),
                            ),
                        ],
                    )
                text += "‚ïò‚ïê‚ïê„Äå T·¥è·¥õ·¥Ä ü {} C ú·¥Ä·¥õs „Äç".format(
                    str(len(gethistory)) + " (max)"
                    if len(gethistory) == 5
                    else str(len(gethistory)),
                )
                conn_hist = InlineKeyboardMarkup(buttons)
            elif buttons:
                conn_hist = InlineKeyboardMarkup([buttons])
            else:
                conn_hist = None
            send_message(
                update.effective_message,
                text,
                parse_mode="markdown",
                reply_markup=conn_hist,
            )

    else:
        getstatusadmin = context.bot.get_chat_member(
            chat.id,
            update.effective_message.from_user.id,
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(chat.id)
        if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
            connection_status = sql.connect(
                update.effective_message.from_user.id,
                chat.id,
            )
            if connection_status:
                chat_name = dispatcher.bot.getChat(chat.id).title
                send_message(
                    update.effective_message,
                    "S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*.".format(chat_name),
                    parse_mode=ParseMode.MARKDOWN,
                )
                try:
                    sql.add_history_conn(user.id, str(chat.id), chat_name)
                    context.bot.send_message(
                        update.effective_message.from_user.id,
                        "Y·¥è·¥ú ·¥Ä Ä ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*. \nUs·¥á `/helpconnect` ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.".format(
                            chat_name,
                        ),
                        parse_mode="markdown",
                    )
                except BadRequest:
                    pass
                except Unauthorized:
                    pass
            else:
                send_message(update.effective_message, "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö!")
        else:
            send_message(
                update.effective_message,
                "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
            )


def disconnect_chat(update, context):

    if update.effective_chat.type == "private":
        disconnection_status = sql.disconnect(update.effective_message.from_user.id)
        if disconnection_status:
            sql.disconnected_chat = send_message(
                update.effective_message,
                "D…™s·¥Ñ·¥è…¥…¥·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç.·¥Ñ ú·¥Ä·¥õ!",
            )
        else:
            send_message(update.effective_message, "Y·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!")
    else:
        send_message(update.effective_message, "T ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥è…¥ ü è …™…¥ PM.")


def connected(bot: Bot, update: Update, chat, user_id, need_admin=True):
    user = update.effective_user

    if chat.type == chat.PRIVATE and sql.get_connected_chat(user_id):

        conn_id = sql.get_connected_chat(user_id).chat_id
        getstatusadmin = bot.get_chat_member(
            conn_id,
            update.effective_message.from_user.id,
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(conn_id)

        if (
            (isadmin)
            or (isallow and ismember)
            or (user.id in DRAGONS)
            or (user.id in DEV_USERS)
        ):
            if need_admin is True:
                if (
                    getstatusadmin.status in ("administrator", "creator")
                    or user_id in DRAGONS
                    or user.id in DEV_USERS
                ):
                    return conn_id
                send_message(
                    update.effective_message,
                    "Y·¥è·¥ú ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò!",
                )
            else:
                return conn_id
        else:
            send_message(
                update.effective_message,
                "T ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥ç…¢·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  Ä…™…¢ ú·¥õs ·¥è Ä  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.\nI  ú·¥† ·¥õ·¥è ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ  è·¥è·¥ú.",
            )
            disconnect_chat(update, bot)
    else:
        return False


CONN_HELP = """
 ·ó©·ëïTIO·ëé’è ·ó©·ñá ·ó©·êØ·ó©I·í™·ó©·ó∑·í™·ó¥ ·óØIT·ïº ·ëïO·ëé·ëé·ó¥·ëïT·ó¥·ó™ ·òú·ñáO·ëå·ë≠’è:
 ‚Ä¢ V…™·¥á·¥° ·¥Ä…¥·¥Ö ·¥á·¥Ö…™·¥õ …¥·¥è·¥õ·¥ás.
 ‚Ä¢ V…™·¥á·¥° ·¥Ä…¥·¥Ö ·¥á·¥Ö…™·¥õ “ì…™ ü·¥õ·¥á Äs..
 ‚Ä¢ G·¥á·¥õ …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã ·¥è“ì ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.
 ‚Ä¢ S·¥á·¥õ ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥Ä…¥·¥õ…™“ì ü·¥è·¥è·¥Ö s·¥á·¥õ·¥õ…™…¥…¢s.
 ‚Ä¢ S·¥á·¥õ ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ s·¥á·¥õ·¥õ…™…¥…¢s.
 ‚Ä¢ S·¥á·¥õ  ü·¥è·¥Ñ·¥ãs ·¥Ä…¥·¥Ö ·¥ú…¥ ü·¥è·¥Ñ·¥ãs …™…¥ ·¥Ñ ú·¥Ä·¥õ.
 ‚Ä¢ E…¥·¥Ä ô ü·¥á ·¥Ä…¥·¥Ö ·¥Ö…™s·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös …™…¥ ·¥Ñ ú·¥Ä·¥õ.
 ‚Ä¢ Ex·¥ò·¥è Ä·¥õ ·¥Ä…¥·¥Ö …™·¥ç·¥ò·¥è Ä·¥õs ·¥è“ì ·¥Ñ ú·¥Ä·¥õ  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò.
 ‚Ä¢ M·¥è Ä·¥á …™…¥ “ì·¥ú·¥õ·¥ú Ä·¥á! s·¥õ·¥Ä è ·¥õ·¥ú…¥·¥á·¥Ö ·¥°…™·¥õ ú @Teddyrobot_bot """


def help_connect_chat(update, context):

    args = context.args

    if update.effective_message.chat.type != "private":
        send_message(update.effective_message, "PM ·¥ç·¥á ·¥°…™·¥õ ú ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò “ì·¥è Ä ·¥õ ú·¥õ.")
        return
    send_message(update.effective_message, CONN_HELP, parse_mode="markdown")


def connect_button(update, context):

    query = update.callback_query
    chat = update.effective_chat
    user = update.effective_user

    connect_match = re.match(r"connect\((.+?)\)", query.data)
    disconnect_match = query.data == "connect_disconnect"
    clear_match = query.data == "connect_clear"
    connect_close = query.data == "connect_close"

    if connect_match:
        target_chat = connect_match.group(1)
        getstatusadmin = context.bot.get_chat_member(target_chat, query.from_user.id)
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(target_chat)

        if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
            connection_status = sql.connect(query.from_user.id, target_chat)

            if connection_status:
                conn_chat = dispatcher.bot.getChat(
                    connected(context.bot, update, chat, user.id, need_admin=False),
                )
                chat_name = conn_chat.title
                query.message.edit_text(
                    "S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*. \nUs·¥á `/helpconnect` ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.".format(
                        chat_name,
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                )
                sql.add_history_conn(user.id, str(conn_chat.id), chat_name)
            else:
                query.message.edit_text("C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö!")
        else:
            context.bot.answer_callback_query(
                query.id,
                "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s…¥·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
                show_alert=True,
            )
    elif disconnect_match:
        disconnection_status = sql.disconnect(query.from_user.id)
        if disconnection_status:
            sql.disconnected_chat = query.message.edit_text("D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ!")
        else:
            context.bot.answer_callback_query(
                query.id,
                "Y·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!",
                show_alert=True,
            )
    elif clear_match:
        sql.clear_history_conn(query.from_user.id)
        query.message.edit_text("H…™s·¥õ·¥è Ä è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö!")
    elif connect_close:
        query.message.edit_text("C ü·¥ès·¥á·¥Ö.\nT·¥è ·¥è·¥ò·¥á…¥ ·¥Ä…¢·¥Ä…™…¥, ·¥õ è·¥ò·¥á /connect")
    else:
        connect_chat(update, context)


__mod_name__ = "C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥"

__help__ = """
S·¥è·¥ç·¥á·¥õ…™·¥ç·¥ás,  è·¥è·¥ú ·¥ä·¥ús·¥õ ·¥°·¥Ä·¥ç·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö s·¥è·¥ç·¥á …¥·¥è·¥õ·¥ás ·¥Ä…¥·¥Ö “ì…™ ü·¥õ·¥á Äs ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ,  ô·¥ú·¥õ  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥°·¥Ä…¥·¥õ ·¥á·¥†·¥á Ä è·¥è…¥·¥á ·¥õ·¥è s·¥á·¥á; ôT ú…™s …™s ·¥° ú·¥á Ä·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥Ñ·¥è·¥ç·¥á …™…¥...
T ú…™s ·¥Ä ü ü·¥è·¥°s  è·¥è·¥ú ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥Ä's ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á, ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥Ö ·¥õ ú…™…¥…¢s ·¥õ·¥è …™·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä·¥ò·¥ò·¥á·¥Ä Ä…™…¥…¢ …™…¥ ·¥Ñ ú·¥Ä·¥õ! F·¥è Ä ·¥è ô·¥†…™·¥è·¥ús  Ä·¥á·¥Äs·¥è…¥s,  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è…¥ ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥õ ú…™…¥…¢s; ô·¥ú·¥õ ·¥Ä…¥ è ·¥ç·¥á·¥ç ô·¥á Ä …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ ·¥†…™·¥á·¥°  è·¥è·¥ú Ä ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ö·¥Ä·¥õ·¥Ä.
‚ûª /connect: C·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ ú·¥Ä·¥õ (C·¥Ä…¥  ô·¥á ·¥Ö·¥è…¥·¥á …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò…¥  ô è /connect ·¥è Ä /connecr <·¥Ñ ú·¥Ä·¥õ …™·¥Ö> …™…¥ PM)
‚ûª /connection: L…™s·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs.
‚ûª /disconnect: D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ “ì Ä·¥è·¥ç ·¥Ä ·¥Ñ ú·¥Ä·¥õ.
‚ûª /helpconnect: L…™s·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö. 
*‚úò ·ó©·ó™·ó∞I·ëé O·ëé·í™Y ‚úò:*
‚ûª /allowconnect <yes/no>: A ü ü·¥è·¥° ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥Ä·¥õ.
"""

CONNECT_CHAT_HANDLER = CommandHandler(
    "connect", connect_chat, pass_args=True, run_async=True
)
CONNECTION_CHAT_HANDLER = CommandHandler("connection", connection_chat, run_async=True)
DISCONNECT_CHAT_HANDLER = CommandHandler("disconnect", disconnect_chat, run_async=True)
ALLOW_CONNECTIONS_HANDLER = CommandHandler(
    "allowconnect",
    allow_connections,
    pass_args=True,
    run_async=True,
)
HELP_CONNECT_CHAT_HANDLER = CommandHandler(
    "helpconnect", help_connect_chat, run_async=True
)
CONNECT_BTN_HANDLER = CallbackQueryHandler(
    connect_button, pattern=r"connect", run_async=True
)

dispatcher.add_handler(CONNECT_CHAT_HANDLER)
dispatcher.add_handler(CONNECTION_CHAT_HANDLER)
dispatcher.add_handler(DISCONNECT_CHAT_HANDLER)
dispatcher.add_handler(ALLOW_CONNECTIONS_HANDLER)
dispatcher.add_handler(HELP_CONNECT_CHAT_HANDLER)
dispatcher.add_handler(CONNECT_BTN_HANDLER)
