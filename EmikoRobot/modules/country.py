from telethon.tl.functions.photos import GetUserPhotosRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import MessageEntityMentionName
from telethon.utils import get_input_location
import flag
import html, os
from countryinfo import CountryInfo
from EmikoRobot import telethn as borg
from EmikoRobot.events import register


@register(pattern="^/country (.*)")
async def msg(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    lol = input_str
    country = CountryInfo(lol)
    try:
        a = country.info()
    except:
        await event.reply("C·¥è·¥ú…¥·¥õ Ä è …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥ú Ä·¥á·¥á…¥·¥õ ü è")
    name = a.get("name")
    bb = a.get("altSpellings")
    hu = ""
    for p in bb:
        hu += p + ",  "

    area = a.get("area")
    borders = ""
    hell = a.get("borders")
    for fk in hell:
        borders += fk + ",  "

    call = ""
    WhAt = a.get("callingCodes")
    for what in WhAt:
        call += what + "  "

    capital = a.get("capital")
    currencies = ""
    fker = a.get("currencies")
    for FKer in fker:
        currencies += FKer + ",  "

    HmM = a.get("demonym")
    geo = a.get("geoJSON")
    pablo = geo.get("features")
    Pablo = pablo[0]
    PAblo = Pablo.get("geometry")
    EsCoBaR = PAblo.get("type")
    iso = ""
    iSo = a.get("ISO")
    for hitler in iSo:
        po = iSo.get(hitler)
        iso += po + ",  "
    fla = iSo.get("alpha2")
    nox = fla.upper()
    okie = flag.flag(nox)

    languages = a.get("languages")
    lMAO = ""
    for lmao in languages:
        lMAO += lmao + ",  "

    nonive = a.get("nativeName")
    waste = a.get("population")
    reg = a.get("region")
    sub = a.get("subregion")
    tik = a.get("timezones")
    tom = ""
    for jerry in tik:
        tom += jerry + ",   "

    GOT = a.get("tld")
    lanester = ""
    for targaryen in GOT:
        lanester += targaryen + ",   "

    wiki = a.get("wiki")

    caption = f"""<b><u>I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ …¢·¥Ä·¥õ ú·¥á Ä·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è üö©</b></u>
<b>
C·¥è·¥ú…¥·¥õ Ä è …¥·¥Ä·¥ç·¥á:- {name}
A ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á s·¥ò·¥á ü ü…™…¥…¢s:- {hu}
C·¥è·¥ú…¥·¥õ Ä è ·¥Ä Ä·¥á·¥Ä:- {area} s«´·¥ú·¥Ä Ä·¥á ·¥ã…™ ü·¥è·¥ç·¥á·¥õ·¥á Äs
B·¥è Ä·¥Ö·¥á Äs:- {borders}
C·¥Ä ü ü…™…¥…¢ ·¥Ñ·¥è·¥Ö·¥ás:- {call}
C·¥è·¥ú…¥·¥õ Ä è's ·¥Ñ·¥Ä·¥ò…™·¥õ·¥Ä ü:- {capital}
C·¥è·¥ú…¥·¥õ Ä è's ·¥Ñ·¥ú Ä Ä·¥á…¥·¥Ñ è:- {currencies}
C·¥è·¥ú…¥·¥õ Ä è's “ì ü·¥Ä…¢:- {okie}
D·¥á·¥ç·¥è…¥ è·¥ç:- {HmM}
C·¥è·¥ú…¥·¥õ Ä è ·¥õ è·¥ò·¥á:- {EsCoBaR}
ISO N·¥Ä·¥ç·¥ás:- {iso}
L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥ás:- {lMAO}
N·¥Ä·¥õ…™·¥†·¥á …¥·¥Ä·¥ç·¥á:- {nonive}
P·¥è·¥ú ü·¥Ä·¥õ…™·¥è…¥:- {waste}
R·¥á…¢…™·¥è…¥:- {reg}
S·¥ú ô  Ä·¥á…¢…™·¥è…¥:- {sub}
T…™·¥ç·¥á ·¥¢·¥è…¥·¥ás:- {tom}
T·¥è·¥ò  ü·¥á·¥†·¥á ü ·¥Ö·¥è·¥ç·¥Ä…™…¥:- {lanester}
W…™·¥ã…™·¥ò·¥á·¥Ö…™·¥Ä:- {wiki}</b>
G·¥Ä·¥õ ú·¥á Ä·¥á·¥Ö  ô è @Teddysupport üñ§.</b>
"""

    await borg.send_message(
        event.chat_id,
        caption,
        parse_mode="HTML",
    )

    await event.delete()
    
__help__ = """
I ·¥Ñ·¥Ä…¥ …¢…™·¥†·¥á  è·¥è·¥ú ·¥Ä…¥ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥è“ì ·¥Ä  è ·¥Ñ·¥è·¥ú…¥·¥õ Ä è.\nS·¥á·¥á  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥Ñ·¥è·¥ú…¥·¥õ Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.!

√ó /country <country name>: T·¥è …¢·¥Ä·¥õ ú·¥á Ä ·¥Ä…¥ …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ …¢·¥è·¥†·¥á·¥ç ·¥Ñ·¥è·¥ú…¥·¥õ Ä è """
    
__mod_name__ = "C·¥è·¥ú…¥·¥õ Ä è"
    
